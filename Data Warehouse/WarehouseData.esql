/*
Sample program for use with IBM WebSphere Message Broker
Â© Copyright International Business Machines Corporation 2005, 2010
Licensed Materials - Property of IBM
*/

CREATE COMPUTE MODULE WarehouseData_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		--Create a valid MQ output Message
		CALL CopyMessageHeaders();

		--Declare variable of type BLOB to hold Input Message Data
		DECLARE InputMessageData BLOB;
		
		--Copy Input XML into BLOB variable
		SET InputMessageData = ASBITSTREAM(InputRoot.XMLNSC);
		
		--Create a reference to the MQMD of the Input Message
		-- and build character representations of required fields
		DECLARE ref REFERENCE TO InputRoot.MQMD;
		DECLARE MsgIdChars CHAR;
		SET MsgIdChars =  CAST (ref.MsgId AS CHAR);
		DECLARE PutTimeChars CHAR;
		SET PutTimeChars = CAST (ref.PutTime AS CHAR);
		DECLARE PutDateChars CHAR;
		SET PutDateChars = CAST (ref.PutDate AS CHAR);
		
		--Insert BLOB Input Message Data and message put timestamp into Database
		INSERT INTO Database.DataWarehouse(MessageData,      PutTimeStamp) 
		       VALUES(InputMessageData, ( CAST(ref.PutTime AS TIMESTAMP)  ) );
		
		--Create a status message output variable
		DECLARE StatusMessage CHAR;		  
		
		--Populate the status message
		SET StatusMessage = 'Message with ID ' || MsgIdChars || 
		                    ' was stored in Database DataWarehouse at ' || PutTimeChars || 
		                    ' on ' || PutDateChars;
		
		--Build output XML message from the status message
		SET OutputRoot.XMLNSC.StatusMessage = StatusMessage;			
							
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;


CREATE COMPUTE MODULE WarehouseData_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Create a valid MQ output Message
		CALL CopyMessageHeaders();

		--If Database insert failed capture exception and output it in XML format

		SET OutputRoot.XMLNSC.Exception = InputExceptionList;	

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
